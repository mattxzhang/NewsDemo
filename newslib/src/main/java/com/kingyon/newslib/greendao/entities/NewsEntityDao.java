package com.kingyon.newslib.greendao.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kingyon.newslib.greendao.entities.NewsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_ENTITY".
*/
public class NewsEntityDao extends AbstractDao<NewsEntity, Long> {

    public static final String TABLENAME = "NEWS_ENTITY";

    /**
     * Properties of entity NewsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Type = new Property(0, String.class, "type", false, "TYPE");
        public final static Property DisplayTemplate = new Property(1, String.class, "displayTemplate", false, "DISPLAY_TEMPLATE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Summary = new Property(4, String.class, "summary", false, "SUMMARY");
        public final static Property Source = new Property(5, String.class, "source", false, "SOURCE");
        public final static Property ContentShareUrl = new Property(6, String.class, "contentShareUrl", false, "CONTENT_SHARE_URL");
        public final static Property WebUrl = new Property(7, String.class, "webUrl", false, "WEB_URL");
        public final static Property VideoUrl = new Property(8, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property CategoryId = new Property(9, Long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property ObjectId = new Property(10, Long.class, "objectId", true, "newsId");
        public final static Property PublishTime = new Property(11, Long.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property IsPay = new Property(12, Boolean.class, "isPay", false, "IS_PAY");
    };


    public NewsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public NewsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_ENTITY\" (" + //
                "\"TYPE\" TEXT," + // 0: type
                "\"DISPLAY_TEMPLATE\" TEXT," + // 1: displayTemplate
                "\"TITLE\" TEXT," + // 2: title
                "\"CONTENT\" TEXT," + // 3: content
                "\"SUMMARY\" TEXT," + // 4: summary
                "\"SOURCE\" TEXT," + // 5: source
                "\"CONTENT_SHARE_URL\" TEXT," + // 6: contentShareUrl
                "\"WEB_URL\" TEXT," + // 7: webUrl
                "\"VIDEO_URL\" TEXT," + // 8: videoUrl
                "\"CATEGORY_ID\" INTEGER," + // 9: categoryId
                "\"newsId\" INTEGER PRIMARY KEY ," + // 10: objectId
                "\"PUBLISH_TIME\" INTEGER," + // 11: publishTime
                "\"IS_PAY\" INTEGER);"); // 12: isPay
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewsEntity entity) {
        stmt.clearBindings();
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(1, type);
        }
 
        String displayTemplate = entity.getDisplayTemplate();
        if (displayTemplate != null) {
            stmt.bindString(2, displayTemplate);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(5, summary);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(6, source);
        }
 
        String contentShareUrl = entity.getContentShareUrl();
        if (contentShareUrl != null) {
            stmt.bindString(7, contentShareUrl);
        }
 
        String webUrl = entity.getWebUrl();
        if (webUrl != null) {
            stmt.bindString(8, webUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(9, videoUrl);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(10, categoryId);
        }
 
        Long objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindLong(11, objectId);
        }
 
        Long publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindLong(12, publishTime);
        }
 
        Boolean isPay = entity.getIsPay();
        if (isPay != null) {
            stmt.bindLong(13, isPay ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10);
    }    

    /** @inheritdoc */
    @Override
    public NewsEntity readEntity(Cursor cursor, int offset) {
        NewsEntity entity = new NewsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // displayTemplate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // summary
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // source
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contentShareUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // webUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // videoUrl
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // categoryId
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // objectId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // publishTime
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0 // isPay
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewsEntity entity, int offset) {
        entity.setType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDisplayTemplate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSummary(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSource(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContentShareUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWebUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVideoUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCategoryId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setObjectId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setPublishTime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setIsPay(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NewsEntity entity, long rowId) {
        entity.setObjectId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NewsEntity entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
