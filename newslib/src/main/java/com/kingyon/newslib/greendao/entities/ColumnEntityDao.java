package com.kingyon.newslib.greendao.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kingyon.newslib.greendao.entities.ColumnEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLUMN_ENTITY".
*/
public class ColumnEntityDao extends AbstractDao<ColumnEntity, Long> {

    public static final String TABLENAME = "COLUMN_ENTITY";

    /**
     * Properties of entity ColumnEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property SpecificInformation = new Property(3, String.class, "specificInformation", false, "SPECIFIC_INFORMATION");
        public final static Property SpecificLink = new Property(4, String.class, "specificLink", false, "SPECIFIC_LINK");
        public final static Property DisplayTemplate = new Property(5, String.class, "displayTemplate", false, "DISPLAY_TEMPLATE");
        public final static Property ImageCount = new Property(6, Integer.class, "imageCount", false, "IMAGE_COUNT");
        public final static Property CategoryImageSize = new Property(7, Integer.class, "categoryImageSize", false, "CATEGORY_IMAGE_SIZE");
        public final static Property ObjectId = new Property(8, Long.class, "objectId", false, "OBJECT_ID");
        public final static Property IsPay = new Property(9, Boolean.class, "isPay", false, "IS_PAY");
        public final static Property ItemWeight = new Property(10, Integer.class, "itemWeight", false, "ITEM_WEIGHT");
        public final static Property IsOrder = new Property(11, Boolean.class, "isOrder", false, "IS_ORDER");
    };


    public ColumnEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ColumnEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLUMN_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"TYPE\" TEXT," + // 2: type
                "\"SPECIFIC_INFORMATION\" TEXT," + // 3: specificInformation
                "\"SPECIFIC_LINK\" TEXT," + // 4: specificLink
                "\"DISPLAY_TEMPLATE\" TEXT," + // 5: displayTemplate
                "\"IMAGE_COUNT\" INTEGER," + // 6: imageCount
                "\"CATEGORY_IMAGE_SIZE\" INTEGER," + // 7: categoryImageSize
                "\"OBJECT_ID\" INTEGER," + // 8: objectId
                "\"IS_PAY\" INTEGER," + // 9: isPay
                "\"ITEM_WEIGHT\" INTEGER," + // 10: itemWeight
                "\"IS_ORDER\" INTEGER);"); // 11: isOrder
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLUMN_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ColumnEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String specificInformation = entity.getSpecificInformation();
        if (specificInformation != null) {
            stmt.bindString(4, specificInformation);
        }
 
        String specificLink = entity.getSpecificLink();
        if (specificLink != null) {
            stmt.bindString(5, specificLink);
        }
 
        String displayTemplate = entity.getDisplayTemplate();
        if (displayTemplate != null) {
            stmt.bindString(6, displayTemplate);
        }
 
        Integer imageCount = entity.getImageCount();
        if (imageCount != null) {
            stmt.bindLong(7, imageCount);
        }
 
        Integer categoryImageSize = entity.getCategoryImageSize();
        if (categoryImageSize != null) {
            stmt.bindLong(8, categoryImageSize);
        }
 
        Long objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindLong(9, objectId);
        }
 
        Boolean isPay = entity.getIsPay();
        if (isPay != null) {
            stmt.bindLong(10, isPay ? 1L: 0L);
        }
 
        Integer itemWeight = entity.getItemWeight();
        if (itemWeight != null) {
            stmt.bindLong(11, itemWeight);
        }
 
        Boolean isOrder = entity.getIsOrder();
        if (isOrder != null) {
            stmt.bindLong(12, isOrder ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ColumnEntity readEntity(Cursor cursor, int offset) {
        ColumnEntity entity = new ColumnEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // specificInformation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // specificLink
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // displayTemplate
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // imageCount
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // categoryImageSize
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // objectId
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isPay
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // itemWeight
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // isOrder
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ColumnEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSpecificInformation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSpecificLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDisplayTemplate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageCount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCategoryImageSize(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setObjectId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setIsPay(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setItemWeight(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setIsOrder(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ColumnEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ColumnEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
