package com.kingyon.newslib.greendao.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kingyon.newslib.greendao.entities.AttachmentEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTACHMENT_ENTITY".
*/
public class AttachmentEntityDao extends AbstractDao<AttachmentEntity, Long> {

    public static final String TABLENAME = "ATTACHMENT_ENTITY";

    /**
     * Properties of entity AttachmentEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, Long.class, "objectId", true, "attachmentId");
        public final static Property NewsId = new Property(1, Long.class, "newsId", false, "NEWS_ID");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
    };


    public AttachmentEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AttachmentEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTACHMENT_ENTITY\" (" + //
                "\"attachmentId\" INTEGER PRIMARY KEY ," + // 0: objectId
                "\"NEWS_ID\" INTEGER," + // 1: newsId
                "\"URL\" TEXT," + // 2: url
                "\"CONTENT\" TEXT," + // 3: content
                "\"TYPE\" TEXT);"); // 4: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTACHMENT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AttachmentEntity entity) {
        stmt.clearBindings();
 
        Long objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindLong(1, objectId);
        }
 
        Long newsId = entity.getNewsId();
        if (newsId != null) {
            stmt.bindLong(2, newsId);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AttachmentEntity readEntity(Cursor cursor, int offset) {
        AttachmentEntity entity = new AttachmentEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // newsId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AttachmentEntity entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNewsId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AttachmentEntity entity, long rowId) {
        entity.setObjectId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AttachmentEntity entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
