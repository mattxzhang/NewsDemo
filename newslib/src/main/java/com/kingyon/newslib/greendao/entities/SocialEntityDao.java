package com.kingyon.newslib.greendao.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kingyon.newslib.greendao.entities.SocialEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SOCIAL_ENTITY".
*/
public class SocialEntityDao extends AbstractDao<SocialEntity, Long> {

    public static final String TABLENAME = "SOCIAL_ENTITY";

    /**
     * Properties of entity SocialEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, Long.class, "objectId", true, "socialId");
        public final static Property NewsId = new Property(1, Long.class, "newsId", false, "NEWS_ID");
        public final static Property PraisedCount = new Property(2, Integer.class, "praisedCount", false, "PRAISED_COUNT");
        public final static Property StepedCount = new Property(3, Integer.class, "stepedCount", false, "STEPED_COUNT");
        public final static Property FavouratedCount = new Property(4, Integer.class, "favouratedCount", false, "FAVOURATED_COUNT");
        public final static Property CommentedCount = new Property(5, Integer.class, "commentedCount", false, "COMMENTED_COUNT");
        public final static Property AllowComment = new Property(6, Boolean.class, "allowComment", false, "ALLOW_COMMENT");
        public final static Property AllowPraise = new Property(7, Boolean.class, "allowPraise", false, "ALLOW_PRAISE");
        public final static Property AllowStep = new Property(8, Boolean.class, "allowStep", false, "ALLOW_STEP");
        public final static Property IsFavorite = new Property(9, Boolean.class, "isFavorite", false, "IS_FAVORITE");
        public final static Property IsPraise = new Property(10, Boolean.class, "isPraise", false, "IS_PRAISE");
        public final static Property IsStep = new Property(11, Boolean.class, "isStep", false, "IS_STEP");
        public final static Property IsCommented = new Property(12, Boolean.class, "isCommented", false, "IS_COMMENTED");
    };


    public SocialEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SocialEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOCIAL_ENTITY\" (" + //
                "\"socialId\" INTEGER PRIMARY KEY ," + // 0: objectId
                "\"NEWS_ID\" INTEGER," + // 1: newsId
                "\"PRAISED_COUNT\" INTEGER," + // 2: praisedCount
                "\"STEPED_COUNT\" INTEGER," + // 3: stepedCount
                "\"FAVOURATED_COUNT\" INTEGER," + // 4: favouratedCount
                "\"COMMENTED_COUNT\" INTEGER," + // 5: commentedCount
                "\"ALLOW_COMMENT\" INTEGER," + // 6: allowComment
                "\"ALLOW_PRAISE\" INTEGER," + // 7: allowPraise
                "\"ALLOW_STEP\" INTEGER," + // 8: allowStep
                "\"IS_FAVORITE\" INTEGER," + // 9: isFavorite
                "\"IS_PRAISE\" INTEGER," + // 10: isPraise
                "\"IS_STEP\" INTEGER," + // 11: isStep
                "\"IS_COMMENTED\" INTEGER);"); // 12: isCommented
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOCIAL_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SocialEntity entity) {
        stmt.clearBindings();
 
        Long objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindLong(1, objectId);
        }
 
        Long newsId = entity.getNewsId();
        if (newsId != null) {
            stmt.bindLong(2, newsId);
        }
 
        Integer praisedCount = entity.getPraisedCount();
        if (praisedCount != null) {
            stmt.bindLong(3, praisedCount);
        }
 
        Integer stepedCount = entity.getStepedCount();
        if (stepedCount != null) {
            stmt.bindLong(4, stepedCount);
        }
 
        Integer favouratedCount = entity.getFavouratedCount();
        if (favouratedCount != null) {
            stmt.bindLong(5, favouratedCount);
        }
 
        Integer commentedCount = entity.getCommentedCount();
        if (commentedCount != null) {
            stmt.bindLong(6, commentedCount);
        }
 
        Boolean allowComment = entity.getAllowComment();
        if (allowComment != null) {
            stmt.bindLong(7, allowComment ? 1L: 0L);
        }
 
        Boolean allowPraise = entity.getAllowPraise();
        if (allowPraise != null) {
            stmt.bindLong(8, allowPraise ? 1L: 0L);
        }
 
        Boolean allowStep = entity.getAllowStep();
        if (allowStep != null) {
            stmt.bindLong(9, allowStep ? 1L: 0L);
        }
 
        Boolean isFavorite = entity.getIsFavorite();
        if (isFavorite != null) {
            stmt.bindLong(10, isFavorite ? 1L: 0L);
        }
 
        Boolean isPraise = entity.getIsPraise();
        if (isPraise != null) {
            stmt.bindLong(11, isPraise ? 1L: 0L);
        }
 
        Boolean isStep = entity.getIsStep();
        if (isStep != null) {
            stmt.bindLong(12, isStep ? 1L: 0L);
        }
 
        Boolean isCommented = entity.getIsCommented();
        if (isCommented != null) {
            stmt.bindLong(13, isCommented ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SocialEntity readEntity(Cursor cursor, int offset) {
        SocialEntity entity = new SocialEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // newsId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // praisedCount
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // stepedCount
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // favouratedCount
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // commentedCount
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // allowComment
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // allowPraise
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // allowStep
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isFavorite
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isPraise
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isStep
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0 // isCommented
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SocialEntity entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNewsId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPraisedCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setStepedCount(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setFavouratedCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCommentedCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAllowComment(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setAllowPraise(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setAllowStep(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsFavorite(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsPraise(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setIsStep(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setIsCommented(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SocialEntity entity, long rowId) {
        entity.setObjectId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SocialEntity entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
